// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  role        UserRole @default(VISITOR)
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  centerManagedBy    CommunityCenter[] @relation("CenterManager")
  contactMessagesSent ContactMessage[]

  @@map("users")
}

model CommunityCenter {
  id          String   @id @default(cuid())
  name        String
  location    String
  latitude    Float
  longitude   Float
  services    String[] // Array of services
  description String
  verified    Boolean  @default(false)
  addedBy     String   // User ID who added this center
  managerId   String?  // User ID of the center manager
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Contact Information
  phone    String?
  email    String?
  website  String?

  // Relations
  manager            User?             @relation("CenterManager", fields: [managerId], references: [id])
  connectionsFrom    Connection[]      @relation("CenterFrom")
  connectionsTo      Connection[]      @relation("CenterTo")
  contactMessages    ContactMessage[]
  messageThreads     MessageThread[]   @relation("ThreadParticipants")
  sentMessages       CenterMessage[]

  @@map("community_centers")
}

model Connection {
  id        String   @id @default(cuid())
  centerAId String
  centerBId String
  createdAt DateTime @default(now())

  // Relations
  centerA CommunityCenter @relation("CenterFrom", fields: [centerAId], references: [id], onDelete: Cascade)
  centerB CommunityCenter @relation("CenterTo", fields: [centerBId], references: [id], onDelete: Cascade)

  @@unique([centerAId, centerBId])
  @@map("connections")
}

model ContactMessage {
  id           String             @id @default(cuid())
  centerId     String
  senderUserId String
  senderName   String
  senderEmail  String
  subject      String
  message      String
  inquiryType  String
  status       ContactMessageStatus @default(PENDING)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  // Relations
  center CommunityCenter @relation(fields: [centerId], references: [id], onDelete: Cascade)
  sender User            @relation(fields: [senderUserId], references: [id])

  @@map("contact_messages")
}

model MessageThread {
  id              String   @id @default(cuid())
  subject         String
  lastActivity    DateTime @default(now())
  messageCount    Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  participants CommunityCenter[] @relation("ThreadParticipants")
  messages     CenterMessage[]

  @@map("message_threads")
}

model CenterMessage {
  id         String   @id @default(cuid())
  threadId   String
  senderId   String
  content    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  // Relations
  thread MessageThread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender CommunityCenter @relation(fields: [senderId], references: [id])

  @@map("center_messages")
}

enum UserRole {
  ADMIN
  CENTER_MANAGER
  VISITOR
}

enum ContactMessageStatus {
  PENDING
  FORWARDED
  RESOLVED
}